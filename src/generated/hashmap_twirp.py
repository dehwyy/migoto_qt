# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: src/proto/hashmap.proto

from google.protobuf import symbol_database as _symbol_database

from twirp.base import Endpoint
from twirp.server import TwirpServer
from internal.lib.twirp_client import TwirpClient

_sym_db = _symbol_database.Default()


class HashmapRPCServer(TwirpServer):

    def __init__(self, *args, service, server_path_prefix="/twirp"):
        super().__init__(service=service)
        self._prefix = F"{server_path_prefix}/hashmap.HashmapRPC"
        self._endpoints = {
            "GetItems": Endpoint(
                service_name="HashmapRPC",
                name="GetItems",
                function=getattr(service, "GetItems"),
                input=_sym_db.GetSymbol("hashmap.GetItemsPayload"),
                output=_sym_db.GetSymbol("hashmap.GetItemsResponse"),
            ),
            "GetTags": Endpoint(
                service_name="HashmapRPC",
                name="GetTags",
                function=getattr(service, "GetTags"),
                input=_sym_db.GetSymbol("general.UserId"),
                output=_sym_db.GetSymbol("hashmap.GetTagsResponse"),
            ),
            "CreateItem": Endpoint(
                service_name="HashmapRPC",
                name="CreateItem",
                function=getattr(service, "CreateItem"),
                input=_sym_db.GetSymbol("hashmap.CreateItemPayload"),
                output=_sym_db.GetSymbol("hashmap.CreateItemResponse"),
            ),
            "RemoveItem": Endpoint(
                service_name="HashmapRPC",
                name="RemoveItem",
                function=getattr(service, "RemoveItem"),
                input=_sym_db.GetSymbol("hashmap.RemoveItemPayload"),
                output=_sym_db.GetSymbol("general.IsSuccess"),
            ),
            "EditItem": Endpoint(
                service_name="HashmapRPC",
                name="EditItem",
                function=getattr(service, "EditItem"),
                input=_sym_db.GetSymbol("hashmap.EditItemPayload"),
                output=_sym_db.GetSymbol("general.IsSuccess"),
            ),
        }


class HashmapRPCClient(TwirpClient):

    def GetItems(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=F"{server_path_prefix}/hashmap.HashmapRPC/GetItems",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol("hashmap.GetItemsResponse"),
            **kwargs,
        )

    def GetTags(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=F"{server_path_prefix}/hashmap.HashmapRPC/GetTags",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol("hashmap.GetTagsResponse"),
            **kwargs,
        )

    def CreateItem(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=F"{server_path_prefix}/hashmap.HashmapRPC/CreateItem",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol("hashmap.CreateItemResponse"),
            **kwargs,
        )

    def RemoveItem(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=F"{server_path_prefix}/hashmap.HashmapRPC/RemoveItem",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol("general.IsSuccess"),
            **kwargs,
        )

    def EditItem(self, *args, ctx, request, server_path_prefix="/twirp", **kwargs):
        return self._make_request(
            url=F"{server_path_prefix}/hashmap.HashmapRPC/EditItem",
            ctx=ctx,
            request=request,
            response_obj=_sym_db.GetSymbol("general.IsSuccess"),
            **kwargs,
        )
