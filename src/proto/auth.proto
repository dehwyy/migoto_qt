syntax = "proto3";

package auth;
option go_package = "github.com/dehwyy/makoto/libs/grpc/generated/auth";

import "src/proto/general.proto";

service AuthRPC {
  rpc SignUp(SignUpRequest) returns (AuthResponse);
  rpc SignIn(SignInRequest) returns (AuthResponse);
  rpc IsUniqueUsername(IsUniqueUsernamePayload) returns (IsUnique);
  rpc VerifyUserEmail(general.UserId) returns (general.IsSuccess);
  rpc ChangePassword(ChangePasswordPayload) returns (general.IsSuccess);
  rpc Logout(general.UserId) returns (general.IsSuccess);
}

message SignUpRequest {
  string username = 1;
  string password = 2;
  string email = 3;
}

message SignInRequest {
  // Credentials: if User.Provider == local (db) @see /libs/models/user_data.go
  message UserCredentials {
    oneof unique_identifier {
      string email = 101;
      string username = 102;
    }
    string password = 103;
  }
  //
  message UserOAuth2 {
    string provider = 200;
    optional string code = 201; // could be provided on direct authorization
  }


  oneof auth_method {
    UserCredentials credentials = 1; // should be provided if SignIn not via OAuth2
    UserOAuth2 oauth2 = 2;
    string token = 3; // via authorization token
  }
}

message AuthResponse {
  string token = 1;
  string userId = 2;
  string username = 3;
}

message IsUniqueUsernamePayload {
  string username = 1;
}

message IsUnique {
  bool isUnique = 1;
}

message ChangePasswordPayload {
  string user_id = 1;
  string old_password = 2;
  string new_password = 3;
}
